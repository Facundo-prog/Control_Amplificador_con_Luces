
-Metodos o funciones de la libreria:

+ PixelControl(int quantityLeds, byte pinLeds, byte brightness, byte pinAudio); // Constructor de la libreria
+ updateStatus(); //Actualiza los efectos y lee el pin de audio (este metodo debe estar en el loop() principal)
+ setEfectsDelay(int numberEfects, int delay); //Setea la cantidad de efectos (8) y el delay entre cada uno
+ setDetectionFrequency(int frequency, float sensibilityPeak, float maxValuePeak); //Mas abajo se explica
+ setDetectionSilence(bool value, int readingFrequency, int ruinValue); //Setea la habilitacion de la deteccion de silencio, el delay entre comprobaciones y el valor de ruido admitido
+ setStateEfects(bool value); //Habilita o no los efectos de la libreria
+ setSpecificColor(byte r, byte g, byte b, int delayValue); //Setea un color especifico y un delay para la transicion
+ getStateMute(); //Debuelve el estado de Mute, si detecto o no audio



-Los valores a continuacion explicados se deben setear en la funcion 'setDetectionFrequency(delay, sensibilidadPico, valorPicoMaximo);'

+ El 'delay' se refiere al delay (en microsegundo) entre lecturas de audio. Dependiendo del valor, se detectaran mejor las frecuencias mas altas o mas bajas.

Tabla de relacion:
    Delay = Hertz
    900   = 1KHz   Frecuencias altas
    1250  = 800hz
    1650  = 600Hz
    2500  = 400hz
    3750  = 266hz
    5000  = 200hz 
    10000 = 100hz  Frecuencias bajas 

+ La 'sensibilidadPico' se refiere a la diferencia que tiene que haber entre el pico de audio actual y el anterior, para que se detecte un pico de audio valido.
Cuanto mayor es, menor es la sensibilidad prente a picos de audio. Y cuento menor, mayor es la sensibilidad.

+ El 'valorPicoMaximo' asimismo determina el valor maximo que puede tener un pico de audio.
Este paramentro esta dise√±ado para evitar falsas lecturas debido a ruido electrico.